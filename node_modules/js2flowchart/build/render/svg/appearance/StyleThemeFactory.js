var _Themes;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mergeObjectStructures } from 'shared/utils/composition';
import DEFAULT, { buildTheme } from './themes/DefaultBaseTheme';
import BLACK_AND_WHITE from './themes/BlackAndWhite';
import BLURRED from './themes/Blurred';
import LIGHT from './themes/Light';
var ThemeNamesMap = {
  DEFAULT: 'DEFAULT',
  BLACK_AND_WHITE: 'BLACK_AND_WHITE',
  BLURRED: 'BLURRED',
  LIGHT: 'LIGHT'
};
export var Themes = (_Themes = {}, _defineProperty(_Themes, ThemeNamesMap.DEFAULT, DEFAULT), _defineProperty(_Themes, ThemeNamesMap.BLACK_AND_WHITE, BLACK_AND_WHITE), _defineProperty(_Themes, ThemeNamesMap.BLURRED, BLURRED), _defineProperty(_Themes, ThemeNamesMap.LIGHT, LIGHT), _Themes);
export var getTheme = function getTheme(themeName) {
  if (!Themes[themeName] === themeName === ThemeNamesMap.DEFAULT) {
    return Themes.DEFAULT;
  }

  return applyStyleToTheme(DEFAULT, Themes[themeName]);
};
export var getDefaultTheme = function getDefaultTheme() {
  return getTheme(ThemeNamesMap.DEFAULT);
};
export var getBlackAndWhiteTheme = function getBlackAndWhiteTheme() {
  return getTheme(ThemeNamesMap.BLACK_AND_WHITE);
};
export var getBlurredTheme = function getBlurredTheme() {
  return getTheme(ThemeNamesMap.BLURRED);
};
export var getLightTheme = function getLightTheme() {
  return getTheme(ThemeNamesMap.LIGHT);
};
export var applyStyleToTheme = function applyStyleToTheme(theme, styles) {
  var common = styles.common,
      shapes = _objectWithoutProperties(styles, ["common"]);

  var deepMerge = mergeObjectStructures(theme, shapes);
  if (!common) return deepMerge;
  return Object.keys(deepMerge).reduce(function (acc, key) {
    return _objectSpread({}, acc, _defineProperty({}, key, _objectSpread({}, deepMerge[key], {}, common)));
  }, {});
};
export var buildColorsBasedTheme = function buildColorsBasedTheme(colors) {
  return buildTheme(colors);
};